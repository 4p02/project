-- Types
create type public.article_type as enum('webpage', 'video', 'document');


-- Private tables
create table private.payments (
    id bigint generated by default as identity primary key unique not null,
    payment_dates timestamp[] default null,
    end_pro timestamp default null,
    owner bigint not null references private.users(id) on delete cascade
);

create table private.users (
    id bigint generated by default as identity primary key unique not null,
    created_at timestamp with time zone null default now(),
    email text unique not null,
    password text not null,
    fullname text not null
);

create table private.payments (
    id bigint generated by default as identity primary key unique not null,
    payment_dates timestamp[] default null,
    end_pro timestamp default null,
    owner bigint not null references private.users(id) on delete cascade
);


-- Public tables
-- mirror the private table, but strip out password
create view public.users with (security_invoker = true) as (
    select id, created_at, email, fullname from private.users
);

create table public.documents (
    id bigint generated by default as identity primary key unique not null,
    created_at timestamp with time zone null default now(),
    type article_type not null,
    filename text default null,
    source_url text default null,
    file bytea default null,
    title text default null,
    image bytea default null,
    body bytea default null,
    summary bytea default null
);


create table public.links (
    id bigint generated by default as identity primary key unique not null,
    owner bigint references private.users(id) on delete cascade,
    given_link text not null,
    shortened_link text unique not null
);

-- User generated history of documents
create table public.history (
    id bigint generated by default as identity primary key unique not null,
    user_id bigint not null references private.users(id) on delete cascade,
    document_id bigint not null references public.documents(id),
    -- maybe we should store link too?
    link_id bigint not null references public.links(id) on delete cascade
);


create table public.tasks (
    id bigint generated by default as identity primary key unique not null,
    created_at timestamp with time zone null default now(),
    document_id bigint not null references public.documents(id),
    user_id bigint references private.users(id) on delete cascade,
    task text not null
);
