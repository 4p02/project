-- Types
create type public.article_type as enum('webpage', 'video', 'document');

-- case insensitive email regex, based on the regex used for HTML5
create domain email_type as citext
check (value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$');

-- Private tables
create table private.payments (
    id bigint generated by default as identity primary key unique not null,
    payment_dates timestamp[] default null,
    end_pro timestamp default null,
    owner bigint not null references private.users(id) on delete cascade
);

create table private.users (
    id bigint generated by default as identity primary key unique not null,
    created_at timestamp with time zone null default now(),
    email email_type unique not null,
    password text not null,
    fullname text not null
);

create table private.payments (
    id bigint generated by default as identity primary key unique not null,
    payment_dates timestamp[] default null,
    end_pro timestamp default null,
    owner bigint not null references private.users(id) on delete cascade
);


-- Public tables
-- mirror the private table, but strip out password
create view public.users with (security_invoker = true) as (
    select id, created_at, email, fullname from private.users
);

create table public.documents (
    id bigint generated by default as identity primary key unique not null,
    created_at timestamp with time zone null default now(),
    type article_type not null,
    filename text default null,
    source_url text unique default null,
    file bytea default null,
    title text default null,
    image bytea default null,
    body bytea default null,
    summary bytea default null
);


create table public.links (
    id bigint generated by default as identity primary key unique not null,
    owner bigint references private.users(id) on delete cascade,
    given_link text not null,
    -- do we need this if we are just going to use the id
    shortened_link text unique 
);

-- User generated history of documents
create table public.history (
    id bigint generated by default as identity primary key unique not null,
    user_id bigint not null references private.users(id) on delete cascade,
    document_id bigint not null references public.documents(id),
    -- maybe we should store link too?
    link_id bigint not null references public.links(id) on delete cascade
);


create table public.tasks (
    id bigint generated by default as identity primary key unique not null,
    created_at timestamp with time zone null default now(),
    document_id bigint not null references public.documents(id),
    user_id bigint references private.users(id) on delete cascade,
    task text not null
);

-- create table public.document_history (
--     -- ...
-- );

-- create view public.user_history (
--     select ... from public.document_history where user_id = current_uid
-- );
